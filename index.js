require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const fetch = require("node-fetch");
const fs = require("fs");
const path = require("path");

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, "public"))); // –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏

let usersData = {};
const DATA_FILE = "usersData.json";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
if (fs.existsSync(DATA_FILE)) {
  usersData = JSON.parse(fs.readFileSync(DATA_FILE));
} else {
  fs.writeFileSync(DATA_FILE, JSON.stringify(usersData));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function saveData() {
  fs.writeFileSync(DATA_FILE, JSON.stringify(usersData));
}

// üìå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// üìå API: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/api/user/:userId", (req, res) => {
  const userId = req.params.userId;

  if (!usersData[userId]) {
    usersData[userId] = {
      endTime: Date.now() + 365 * 24 * 60 * 60 * 1000, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –≥–æ–¥
      points: 0
    };
    saveData();
  }

  res.json({
    endTime: usersData[userId].endTime,
    points: usersData[userId].points
  });
});

// üìå API: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
app.post("/api/user/:userId/add-points", (req, res) => {
  const userId = req.params.userId;
  if (!usersData[userId]) return res.status(404).json({ error: "User not found" });

  usersData[userId].points += 1;
  saveData();

  res.json({ points: usersData[userId].points });
});

// üìå API: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ (—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞)
app.post("/api/user/:userId/setup", (req, res) => {
  const userId = req.params.userId;
  const { endTime } = req.body;

  if (!usersData[userId]) {
    usersData[userId] = { points: 0 };
  }

  usersData[userId].endTime = endTime;
  saveData();
  res.json({ success: true });
});

// üìå API: –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–±–Ω—É–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
app.post("/api/users/reset", (req, res) => {
  usersData = {};
  saveData();
  res.json({ success: true, message: "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã" });
});

// üìå –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});