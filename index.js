require("dotenv").config();
const { Telegraf } = require("telegraf");
const express = require("express");
const fs = require("fs");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

const PORT = process.env.PORT || 3000;
const WEBHOOK_PATH = `/bot${process.env.BOT_TOKEN}`;
const WEBHOOK_URL = `${process.env.WEBAPP_URL}${WEBHOOK_PATH}`;

// –•—Ä–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª–µ (–Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ)
let usersData = {};
const DATA_FILE = "users.json";

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
if (fs.existsSync(DATA_FILE)) {
    usersData = JSON.parse(fs.readFileSync(DATA_FILE, "utf-8"));
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const saveData = () => {
    fs.writeFileSync(DATA_FILE, JSON.stringify(usersData, null, 2));
};

// **–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏**
function getTimeLeft(endTime) {
    const now = new Date().getTime();
    const diff = endTime - now;

    if (diff <= 0) {
        return "‚è≥ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!";
    }

    const years = Math.floor(diff / (1000 * 60 * 60 * 24 * 365));
    const months = Math.floor((diff % (1000 * 60 * 60 * 24 * 365)) / (1000 * 60 * 60 * 24 * 30));
    const days = Math.floor((diff % (1000 * 60 * 60 * 24 * 30)) / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

    return `${years} –≥. ${months} –º–µ—Å. ${days} –¥. ${hours} —á. ${minutes} –º. ${seconds} —Å.`;
}

// **–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start**
bot.start((ctx) => {
    const userId = ctx.from.id;
    
    if (!usersData[userId]) {
        let endDate = new Date();
        endDate.setFullYear(endDate.getFullYear() + 1);

        usersData[userId] = {
            username: ctx.from.username || `User${userId}`,
            endTime: endDate.getTime(),
            points: 0,
            lastCheckIn: null,
        };
        saveData();
    }

    ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! üöÄ\n\n` +
        `–¢—ã –∑–∞–ø—É—Å—Ç–∏–ª —Ç–∞–π–º–µ—Ä, –æ—Å—Ç–∞–ª–æ—Å—å:\n\n‚è≥ *${getTimeLeft(usersData[userId].endTime)}* ‚è≥\n\n` +
        `–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å WebApp –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º!`,
        {
            parse_mode: "Markdown",
            reply_markup: {
                inline_keyboard: [[
                    { text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp", web_app: { url: process.env.WEBAPP_URL } }
                ]]
            }
        }
    );
});

// **–ö–æ–º–∞–Ω–¥–∞ /timer ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è**
bot.command("timer", (ctx) => {
    const userId = ctx.from.id;

    if (!usersData[userId]) {
        return ctx.reply("–¢—ã –µ—â—ë –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª —Ç–∞–π–º–µ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π /start.");
    }

    ctx.reply(
        `‚è≥ *–¢–≤–æ–π —Ç–∞–π–º–µ—Ä*\n\nüï∞ –û—Å—Ç–∞–ª–æ—Å—å: *${getTimeLeft(usersData[userId].endTime)}*`,
        { parse_mode: "Markdown" }
    );
});

// **–ß–µ–∫-–∏–Ω (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–Ω—è)**
bot.command("checkin", (ctx) => {
    const userId = ctx.from.id;
    const today = new Date().toISOString().split("T")[0];

    if (!usersData[userId]) {
        return ctx.reply("–¢—ã –µ—â—ë –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª —Ç–∞–π–º–µ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π /start.");
    }

    if (usersData[userId].lastCheckIn === today) {
        return ctx.reply("–¢—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞. ‚è≥");
    }

    usersData[userId].lastCheckIn = today;
    usersData[userId].points += 5;
    saveData();

    ctx.reply(`‚úÖ –î–µ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢—ã –ø–æ–ª—É—á–∏–ª +5 –±–∞–ª–ª–æ–≤. üéâ\nüï∞ –û—Å—Ç–∞–ª–æ—Å—å: *${getTimeLeft(usersData[userId].endTime)}*`, { parse_mode: "Markdown" });
});

// **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook**
app.use(express.json());
app.post(WEBHOOK_PATH, (req, res) => {
    bot.handleUpdate(req.body, res);
});

// **–ó–∞–ø—É—Å–∫–∞–µ–º Webhook-—Å–µ—Ä–≤–µ—Ä**
app.listen(PORT, async () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! üöÄ");
});