require("dotenv").config();
const { Telegraf } = require("telegraf");
const express = require("express");
const fs = require("fs");
const path = require("path");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

const PORT = process.env.PORT || 3000;
const WEBHOOK_PATH = `/bot${process.env.BOT_TOKEN}`;
const WEBHOOK_URL = `${process.env.WEBAPP_URL}${WEBHOOK_PATH}`;

let usersData = {};
const DATA_FILE = "users.json";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if (fs.existsSync(DATA_FILE)) {
    usersData = JSON.parse(fs.readFileSync(DATA_FILE, "utf-8"));
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const saveData = () => {
    fs.writeFileSync(DATA_FILE, JSON.stringify(usersData, null, 2));
};

// **–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏**
function getTimeLeft(endTime) {
    const now = new Date().getTime();
    const diff = endTime - now;

    if (diff <= 0) {
        return "‚è≥ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!";
    }

    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

    return `${days} –¥. ${hours} —á. ${minutes} –º. ${seconds} —Å.`;
}

// **–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start**
bot.start((ctx) => {
    const userId = ctx.from.id;
    
    if (!usersData[userId]) {
        let endDate = new Date();
        endDate.setFullYear(endDate.getFullYear() + 1);

        usersData[userId] = {
            username: ctx.from.username || `User${userId}`,
            endTime: endDate.getTime(),
            points: 0,
            lastCheckIn: null,
        };
        saveData();
    }

    ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! üöÄ\n\n` +
        `–¢—ã –∑–∞–ø—É—Å—Ç–∏–ª —Ç–∞–π–º–µ—Ä, –æ—Å—Ç–∞–ª–æ—Å—å:\n\n‚è≥ *${getTimeLeft(usersData[userId].endTime)}* ‚è≥\n\n` +
        `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *${usersData[userId].points}* –±–∞–ª–ª–æ–≤.\n\n` +
        `–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å WebApp –∏ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã!`,
        {
            parse_mode: "Markdown",
            reply_markup: {
                inline_keyboard: [[
                    { text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp", web_app: { url: process.env.WEBAPP_URL } }
                ]]
            }
        }
    );
});

// **–ö–æ–º–∞–Ω–¥–∞ /points ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
bot.command("points", (ctx) => {
    const userId = ctx.from.id;
    if (!usersData[userId]) {
        return ctx.reply("–¢—ã –µ—â—ë –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª —Ç–∞–π–º–µ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π /start.");
    }
    ctx.reply(`‚≠ê –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *${usersData[userId].points}* –±–∞–ª–ª–æ–≤`, { parse_mode: "Markdown" });
});

// **API –¥–ª—è WebApp (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞–π–º–µ—Ä–µ –∏ –±–∞–ª–∞–Ω—Å–µ)**
app.get("/api/user/:userId", (req, res) => {
    const userId = req.params.userId;
    if (!usersData[userId]) {
        return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({
        endTime: usersData[userId].endTime,
        points: usersData[userId].points,
    });
});

// **–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ "GO"**
app.post("/api/user/:userId/add-points", express.json(), (req, res) => {
    const userId = req.params.userId;
    if (!usersData[userId]) {
        return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    usersData[userId].points += 5;
    saveData();
    res.json({ points: usersData[userId].points });
});

// **–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ `/`**
app.get("/", (req, res) => {
    res.send("–ü—Ä–∏–≤–µ—Ç! WebApp —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. üöÄ");
});

// **–ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è WebApp**
app.use(express.static(path.join(__dirname, "public")));

// **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook**
app.use(express.json());
app.post(WEBHOOK_PATH, (req, res) => {
    bot.handleUpdate(req.body, res);
});

// **–ó–∞–ø—É—Å–∫–∞–µ–º Webhook-—Å–µ—Ä–≤–µ—Ä**
app.listen(PORT, async () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! üöÄ");
});