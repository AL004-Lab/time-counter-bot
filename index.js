require("dotenv").config();
const { Telegraf } = require("telegraf");
const express = require("express");
const fs = require("fs");

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –•—Ä–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª–µ (–Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ)
let usersData = {};
const DATA_FILE = "users.json";

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
if (fs.existsSync(DATA_FILE)) {
    usersData = JSON.parse(fs.readFileSync(DATA_FILE, "utf-8"));
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const saveData = () => {
    fs.writeFileSync(DATA_FILE, JSON.stringify(usersData, null, 2));
};

// **–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start**
bot.start((ctx) => {
    const userId = ctx.from.id;
    
    if (!usersData[userId]) {
        usersData[userId] = {
            username: ctx.from.username || `User${userId}`,
            daysLeft: 365,
            points: 0,
            lastCheckIn: null,
        };
        saveData();
    }

    ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! üöÄ\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–°—á—ë—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏".\n\n–¢—ã –º–æ–∂–µ—à—å:\n‚úîÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç\n‚úîÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n‚úîÔ∏è –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π\n\nüîΩ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å WebApp!`,
        {
            reply_markup: {
                inline_keyboard: [[
                    { text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp", web_app: { url: process.env.WEBAPP_URL } }
                ]]
            }
        }
    );
});

// **–ß–µ–∫-–∏–Ω (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–Ω—è)**
bot.command("checkin", (ctx) => {
    const userId = ctx.from.id;
    const today = new Date().toISOString().split("T")[0];

    if (!usersData[userId]) {
        return ctx.reply("–¢—ã –µ—â—ë –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª —Å–≤–æ–π —Ç–∞–π–º–µ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π /start.");
    }

    if (usersData[userId].lastCheckIn === today) {
        return ctx.reply("–¢—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞. ‚è≥");
    }

    usersData[userId].lastCheckIn = today;
    usersData[userId].points += 5;
    usersData[userId].daysLeft = Math.max(usersData[userId].daysLeft - 1, 0);
    saveData();

    ctx.reply(`‚úÖ –î–µ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢—ã –ø–æ–ª—É—á–∏–ª +5 –±–∞–ª–ª–æ–≤. üéâ\nüìâ –û—Å—Ç–∞–ª–æ—Å—å ${usersData[userId].daysLeft} –¥–Ω–µ–π.`);
});

// **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞**
bot.command("status", (ctx) => {
    const userId = ctx.from.id;

    if (!usersData[userId]) {
        return ctx.reply("–¢—ã –µ—â—ë –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª —Å–≤–æ–π —Ç–∞–π–º–µ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π /start.");
    }

    ctx.reply(
        `‚è≥ *–¢–≤–æ–π —Ç–∞–π–º–µ—Ä*\nüï∞ –û—Å—Ç–∞–ª–æ—Å—å: ${usersData[userId].daysLeft} –¥–Ω–µ–π\n‚≠ê –ë–∞–ª–ª—ã: ${usersData[userId].points}`,
        { parse_mode: "Markdown" }
    );
});

// **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫—Ç–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤)**
setInterval(() => {
    const today = new Date().toISOString().split("T")[0];

    for (const userId in usersData) {
        if (usersData[userId].lastCheckIn !== today) {
            bot.telegram.sendMessage(userId, "‚è∞ –¢—ã –∑–∞–±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–Ω—å! –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —Å–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É. –í–≤–µ–¥–∏ /checkin.");
        }
    }
}, 1000 * 60 * 60 * 24); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

// **–ó–∞–ø—É—Å–∫–∞–µ–º Express-—Å–µ—Ä–≤–µ—Ä –¥–ª—è WebApp**
app.use(express.static("public"));

app.get("/", (req, res) => {
    res.send("WebApp —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ");
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

// **–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞**
bot.launch();
console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! ‚úÖ");